// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"redpanda-schema-registry/models"
)

// GetModeReader is a Reader for the GetMode structure.
type GetModeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetModeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetModeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetModeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /mode] get_mode", response, response.Code())
	}
}

// NewGetModeOK creates a GetModeOK with default headers values
func NewGetModeOK() *GetModeOK {
	return &GetModeOK{}
}

/*
GetModeOK describes a response with status code 200, with default header values.

OK
*/
type GetModeOK struct {
	Payload *GetModeOKBody
}

// IsSuccess returns true when this get mode o k response has a 2xx status code
func (o *GetModeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get mode o k response has a 3xx status code
func (o *GetModeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get mode o k response has a 4xx status code
func (o *GetModeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get mode o k response has a 5xx status code
func (o *GetModeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get mode o k response a status code equal to that given
func (o *GetModeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get mode o k response
func (o *GetModeOK) Code() int {
	return 200
}

func (o *GetModeOK) Error() string {
	return fmt.Sprintf("[GET /mode][%d] getModeOK  %+v", 200, o.Payload)
}

func (o *GetModeOK) String() string {
	return fmt.Sprintf("[GET /mode][%d] getModeOK  %+v", 200, o.Payload)
}

func (o *GetModeOK) GetPayload() *GetModeOKBody {
	return o.Payload
}

func (o *GetModeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetModeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetModeInternalServerError creates a GetModeInternalServerError with default headers values
func NewGetModeInternalServerError() *GetModeInternalServerError {
	return &GetModeInternalServerError{}
}

/*
GetModeInternalServerError describes a response with status code 500, with default header values.

Internal Server error
*/
type GetModeInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get mode internal server error response has a 2xx status code
func (o *GetModeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get mode internal server error response has a 3xx status code
func (o *GetModeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get mode internal server error response has a 4xx status code
func (o *GetModeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get mode internal server error response has a 5xx status code
func (o *GetModeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get mode internal server error response a status code equal to that given
func (o *GetModeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get mode internal server error response
func (o *GetModeInternalServerError) Code() int {
	return 500
}

func (o *GetModeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /mode][%d] getModeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetModeInternalServerError) String() string {
	return fmt.Sprintf("[GET /mode][%d] getModeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetModeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetModeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetModeOKBody get mode o k body
swagger:model GetModeOKBody
*/
type GetModeOKBody struct {

	// mode
	Mode string `json:"mode,omitempty"`
}

// Validate validates this get mode o k body
func (o *GetModeOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get mode o k body based on context it is used
func (o *GetModeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetModeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetModeOKBody) UnmarshalBinary(b []byte) error {
	var res GetModeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
