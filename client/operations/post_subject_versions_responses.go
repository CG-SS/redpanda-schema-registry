// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/CG-SS/redpanda-schema-registry/models"
)

// PostSubjectVersionsReader is a Reader for the PostSubjectVersions structure.
type PostSubjectVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSubjectVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostSubjectVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewPostSubjectVersionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostSubjectVersionsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostSubjectVersionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /subjects/{subject}/versions] post_subject_versions", response, response.Code())
	}
}

// NewPostSubjectVersionsOK creates a PostSubjectVersionsOK with default headers values
func NewPostSubjectVersionsOK() *PostSubjectVersionsOK {
	return &PostSubjectVersionsOK{}
}

/*
PostSubjectVersionsOK describes a response with status code 200, with default header values.

OK
*/
type PostSubjectVersionsOK struct {
	Payload *PostSubjectVersionsOKBody
}

// IsSuccess returns true when this post subject versions o k response has a 2xx status code
func (o *PostSubjectVersionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post subject versions o k response has a 3xx status code
func (o *PostSubjectVersionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post subject versions o k response has a 4xx status code
func (o *PostSubjectVersionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post subject versions o k response has a 5xx status code
func (o *PostSubjectVersionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post subject versions o k response a status code equal to that given
func (o *PostSubjectVersionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post subject versions o k response
func (o *PostSubjectVersionsOK) Code() int {
	return 200
}

func (o *PostSubjectVersionsOK) Error() string {
	return fmt.Sprintf("[POST /subjects/{subject}/versions][%d] postSubjectVersionsOK  %+v", 200, o.Payload)
}

func (o *PostSubjectVersionsOK) String() string {
	return fmt.Sprintf("[POST /subjects/{subject}/versions][%d] postSubjectVersionsOK  %+v", 200, o.Payload)
}

func (o *PostSubjectVersionsOK) GetPayload() *PostSubjectVersionsOKBody {
	return o.Payload
}

func (o *PostSubjectVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostSubjectVersionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSubjectVersionsConflict creates a PostSubjectVersionsConflict with default headers values
func NewPostSubjectVersionsConflict() *PostSubjectVersionsConflict {
	return &PostSubjectVersionsConflict{}
}

/*
PostSubjectVersionsConflict describes a response with status code 409, with default header values.

Incompatible schema
*/
type PostSubjectVersionsConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post subject versions conflict response has a 2xx status code
func (o *PostSubjectVersionsConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post subject versions conflict response has a 3xx status code
func (o *PostSubjectVersionsConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post subject versions conflict response has a 4xx status code
func (o *PostSubjectVersionsConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post subject versions conflict response has a 5xx status code
func (o *PostSubjectVersionsConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post subject versions conflict response a status code equal to that given
func (o *PostSubjectVersionsConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post subject versions conflict response
func (o *PostSubjectVersionsConflict) Code() int {
	return 409
}

func (o *PostSubjectVersionsConflict) Error() string {
	return fmt.Sprintf("[POST /subjects/{subject}/versions][%d] postSubjectVersionsConflict  %+v", 409, o.Payload)
}

func (o *PostSubjectVersionsConflict) String() string {
	return fmt.Sprintf("[POST /subjects/{subject}/versions][%d] postSubjectVersionsConflict  %+v", 409, o.Payload)
}

func (o *PostSubjectVersionsConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSubjectVersionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSubjectVersionsUnprocessableEntity creates a PostSubjectVersionsUnprocessableEntity with default headers values
func NewPostSubjectVersionsUnprocessableEntity() *PostSubjectVersionsUnprocessableEntity {
	return &PostSubjectVersionsUnprocessableEntity{}
}

/*
PostSubjectVersionsUnprocessableEntity describes a response with status code 422, with default header values.

Invalid schema
*/
type PostSubjectVersionsUnprocessableEntity struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post subject versions unprocessable entity response has a 2xx status code
func (o *PostSubjectVersionsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post subject versions unprocessable entity response has a 3xx status code
func (o *PostSubjectVersionsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post subject versions unprocessable entity response has a 4xx status code
func (o *PostSubjectVersionsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this post subject versions unprocessable entity response has a 5xx status code
func (o *PostSubjectVersionsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this post subject versions unprocessable entity response a status code equal to that given
func (o *PostSubjectVersionsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the post subject versions unprocessable entity response
func (o *PostSubjectVersionsUnprocessableEntity) Code() int {
	return 422
}

func (o *PostSubjectVersionsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /subjects/{subject}/versions][%d] postSubjectVersionsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostSubjectVersionsUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /subjects/{subject}/versions][%d] postSubjectVersionsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostSubjectVersionsUnprocessableEntity) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSubjectVersionsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSubjectVersionsInternalServerError creates a PostSubjectVersionsInternalServerError with default headers values
func NewPostSubjectVersionsInternalServerError() *PostSubjectVersionsInternalServerError {
	return &PostSubjectVersionsInternalServerError{}
}

/*
PostSubjectVersionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostSubjectVersionsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post subject versions internal server error response has a 2xx status code
func (o *PostSubjectVersionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post subject versions internal server error response has a 3xx status code
func (o *PostSubjectVersionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post subject versions internal server error response has a 4xx status code
func (o *PostSubjectVersionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post subject versions internal server error response has a 5xx status code
func (o *PostSubjectVersionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post subject versions internal server error response a status code equal to that given
func (o *PostSubjectVersionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post subject versions internal server error response
func (o *PostSubjectVersionsInternalServerError) Code() int {
	return 500
}

func (o *PostSubjectVersionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /subjects/{subject}/versions][%d] postSubjectVersionsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostSubjectVersionsInternalServerError) String() string {
	return fmt.Sprintf("[POST /subjects/{subject}/versions][%d] postSubjectVersionsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostSubjectVersionsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSubjectVersionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostSubjectVersionsOKBody post subject versions o k body
swagger:model PostSubjectVersionsOKBody
*/
type PostSubjectVersionsOKBody struct {

	// id
	ID int64 `json:"id,omitempty"`
}

// Validate validates this post subject versions o k body
func (o *PostSubjectVersionsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post subject versions o k body based on context it is used
func (o *PostSubjectVersionsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostSubjectVersionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSubjectVersionsOKBody) UnmarshalBinary(b []byte) error {
	var res PostSubjectVersionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
