// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"redpanda-schema-registry/models"
)

// DeleteSubjectReader is a Reader for the DeleteSubject structure.
type DeleteSubjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSubjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSubjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteSubjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSubjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /subjects/{subject}] delete_subject", response, response.Code())
	}
}

// NewDeleteSubjectOK creates a DeleteSubjectOK with default headers values
func NewDeleteSubjectOK() *DeleteSubjectOK {
	return &DeleteSubjectOK{}
}

/*
DeleteSubjectOK describes a response with status code 200, with default header values.

OK
*/
type DeleteSubjectOK struct {
	Payload []int64
}

// IsSuccess returns true when this delete subject o k response has a 2xx status code
func (o *DeleteSubjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete subject o k response has a 3xx status code
func (o *DeleteSubjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subject o k response has a 4xx status code
func (o *DeleteSubjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete subject o k response has a 5xx status code
func (o *DeleteSubjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subject o k response a status code equal to that given
func (o *DeleteSubjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete subject o k response
func (o *DeleteSubjectOK) Code() int {
	return 200
}

func (o *DeleteSubjectOK) Error() string {
	return fmt.Sprintf("[DELETE /subjects/{subject}][%d] deleteSubjectOK  %+v", 200, o.Payload)
}

func (o *DeleteSubjectOK) String() string {
	return fmt.Sprintf("[DELETE /subjects/{subject}][%d] deleteSubjectOK  %+v", 200, o.Payload)
}

func (o *DeleteSubjectOK) GetPayload() []int64 {
	return o.Payload
}

func (o *DeleteSubjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubjectNotFound creates a DeleteSubjectNotFound with default headers values
func NewDeleteSubjectNotFound() *DeleteSubjectNotFound {
	return &DeleteSubjectNotFound{}
}

/*
DeleteSubjectNotFound describes a response with status code 404, with default header values.

Subject not found
*/
type DeleteSubjectNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete subject not found response has a 2xx status code
func (o *DeleteSubjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subject not found response has a 3xx status code
func (o *DeleteSubjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subject not found response has a 4xx status code
func (o *DeleteSubjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subject not found response has a 5xx status code
func (o *DeleteSubjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subject not found response a status code equal to that given
func (o *DeleteSubjectNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete subject not found response
func (o *DeleteSubjectNotFound) Code() int {
	return 404
}

func (o *DeleteSubjectNotFound) Error() string {
	return fmt.Sprintf("[DELETE /subjects/{subject}][%d] deleteSubjectNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSubjectNotFound) String() string {
	return fmt.Sprintf("[DELETE /subjects/{subject}][%d] deleteSubjectNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSubjectNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSubjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubjectInternalServerError creates a DeleteSubjectInternalServerError with default headers values
func NewDeleteSubjectInternalServerError() *DeleteSubjectInternalServerError {
	return &DeleteSubjectInternalServerError{}
}

/*
DeleteSubjectInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteSubjectInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete subject internal server error response has a 2xx status code
func (o *DeleteSubjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subject internal server error response has a 3xx status code
func (o *DeleteSubjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subject internal server error response has a 4xx status code
func (o *DeleteSubjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete subject internal server error response has a 5xx status code
func (o *DeleteSubjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete subject internal server error response a status code equal to that given
func (o *DeleteSubjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete subject internal server error response
func (o *DeleteSubjectInternalServerError) Code() int {
	return 500
}

func (o *DeleteSubjectInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /subjects/{subject}][%d] deleteSubjectInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSubjectInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /subjects/{subject}][%d] deleteSubjectInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSubjectInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSubjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
