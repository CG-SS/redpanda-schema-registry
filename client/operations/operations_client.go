// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CompatibilitySubjectVersion(params *CompatibilitySubjectVersionParams, opts ...ClientOption) (*CompatibilitySubjectVersionOK, error)

	DeleteSubject(params *DeleteSubjectParams, opts ...ClientOption) (*DeleteSubjectOK, error)

	DeleteSubjectVersion(params *DeleteSubjectVersionParams, opts ...ClientOption) (*DeleteSubjectVersionOK, error)

	GetConfig(params *GetConfigParams, opts ...ClientOption) (*GetConfigOK, error)

	GetConfigSubject(params *GetConfigSubjectParams, opts ...ClientOption) (*GetConfigSubjectOK, error)

	GetMode(params *GetModeParams, opts ...ClientOption) (*GetModeOK, error)

	GetSchemasIdsID(params *GetSchemasIdsIDParams, opts ...ClientOption) (*GetSchemasIdsIDOK, error)

	GetSchemasIdsIDVersions(params *GetSchemasIdsIDVersionsParams, opts ...ClientOption) (*GetSchemasIdsIDVersionsOK, error)

	GetSchemasTypes(params *GetSchemasTypesParams, opts ...ClientOption) (*GetSchemasTypesOK, error)

	GetSubjectVersions(params *GetSubjectVersionsParams, opts ...ClientOption) (*GetSubjectVersionsOK, error)

	GetSubjectVersionsVersion(params *GetSubjectVersionsVersionParams, opts ...ClientOption) (*GetSubjectVersionsVersionOK, error)

	GetSubjectVersionsVersionReferencedBy(params *GetSubjectVersionsVersionReferencedByParams, opts ...ClientOption) (*GetSubjectVersionsVersionReferencedByOK, error)

	GetSubjectVersionsVersionSchema(params *GetSubjectVersionsVersionSchemaParams, opts ...ClientOption) (*GetSubjectVersionsVersionSchemaOK, error)

	GetSubjects(params *GetSubjectsParams, opts ...ClientOption) (*GetSubjectsOK, error)

	PostSubject(params *PostSubjectParams, opts ...ClientOption) (*PostSubjectOK, error)

	PostSubjectVersions(params *PostSubjectVersionsParams, opts ...ClientOption) (*PostSubjectVersionsOK, error)

	PutConfig(params *PutConfigParams, opts ...ClientOption) (*PutConfigOK, error)

	PutConfigSubject(params *PutConfigSubjectParams, opts ...ClientOption) (*PutConfigSubjectOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CompatibilitySubjectVersion tests compatibility of a schema for the subject and version
*/
func (a *Client) CompatibilitySubjectVersion(params *CompatibilitySubjectVersionParams, opts ...ClientOption) (*CompatibilitySubjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompatibilitySubjectVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "compatibility_subject_version",
		Method:             "POST",
		PathPattern:        "/compatibility/subjects/{subject}/versions/{version}",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompatibilitySubjectVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompatibilitySubjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for compatibility_subject_version: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSubject deletes all schemas for the subject
*/
func (a *Client) DeleteSubject(params *DeleteSubjectParams, opts ...ClientOption) (*DeleteSubjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_subject",
		Method:             "DELETE",
		PathPattern:        "/subjects/{subject}",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSubjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_subject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSubjectVersion deletes a schema for the subject and version
*/
func (a *Client) DeleteSubjectVersion(params *DeleteSubjectVersionParams, opts ...ClientOption) (*DeleteSubjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubjectVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_subject_version",
		Method:             "DELETE",
		PathPattern:        "/subjects/{subject}/versions/{version}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubjectVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSubjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_subject_version: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfig gets the global compatibility level
*/
func (a *Client) GetConfig(params *GetConfigParams, opts ...ClientOption) (*GetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_config",
		Method:             "GET",
		PathPattern:        "/config",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfigSubject gets the compatibility level for a subject
*/
func (a *Client) GetConfigSubject(params *GetConfigSubjectParams, opts ...ClientOption) (*GetConfigSubjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigSubjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_config_subject",
		Method:             "GET",
		PathPattern:        "/config/{subject}",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigSubjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigSubjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_config_subject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMode gets the global mode
*/
func (a *Client) GetMode(params *GetModeParams, opts ...ClientOption) (*GetModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_mode",
		Method:             "GET",
		PathPattern:        "/mode",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSchemasIdsID gets a schema by ID
*/
func (a *Client) GetSchemasIdsID(params *GetSchemasIdsIDParams, opts ...ClientOption) (*GetSchemasIdsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchemasIdsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_schemas_ids_id",
		Method:             "GET",
		PathPattern:        "/schemas/ids/{id}",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchemasIdsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchemasIdsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_schemas_ids_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSchemasIdsIDVersions gets a list of subject version for the schema ID
*/
func (a *Client) GetSchemasIdsIDVersions(params *GetSchemasIdsIDVersionsParams, opts ...ClientOption) (*GetSchemasIdsIDVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchemasIdsIDVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_schemas_ids_id_versions",
		Method:             "GET",
		PathPattern:        "/schemas/ids/{id}/versions",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchemasIdsIDVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchemasIdsIDVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_schemas_ids_id_versions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSchemasTypes gets the supported schema types
*/
func (a *Client) GetSchemasTypes(params *GetSchemasTypesParams, opts ...ClientOption) (*GetSchemasTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchemasTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_schemas_types",
		Method:             "GET",
		PathPattern:        "/schemas/types",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchemasTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchemasTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_schemas_types: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubjectVersions retrieves a list of versions for a subject
*/
func (a *Client) GetSubjectVersions(params *GetSubjectVersionsParams, opts ...ClientOption) (*GetSubjectVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubjectVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_subject_versions",
		Method:             "GET",
		PathPattern:        "/subjects/{subject}/versions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubjectVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubjectVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_subject_versions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubjectVersionsVersion retrieves a schema for the subject and version
*/
func (a *Client) GetSubjectVersionsVersion(params *GetSubjectVersionsVersionParams, opts ...ClientOption) (*GetSubjectVersionsVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubjectVersionsVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_subject_versions_version",
		Method:             "GET",
		PathPattern:        "/subjects/{subject}/versions/{version}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubjectVersionsVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubjectVersionsVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_subject_versions_version: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubjectVersionsVersionReferencedBy retrieves a list of schema i ds that reference the subject and version
*/
func (a *Client) GetSubjectVersionsVersionReferencedBy(params *GetSubjectVersionsVersionReferencedByParams, opts ...ClientOption) (*GetSubjectVersionsVersionReferencedByOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubjectVersionsVersionReferencedByParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_subject_versions_version_referenced_by",
		Method:             "GET",
		PathPattern:        "/subjects/{subject}/versions/{version}/referencedBy",
		ProducesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubjectVersionsVersionReferencedByReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubjectVersionsVersionReferencedByOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_subject_versions_version_referenced_by: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubjectVersionsVersionSchema retrieves a schema for the subject and version
*/
func (a *Client) GetSubjectVersionsVersionSchema(params *GetSubjectVersionsVersionSchemaParams, opts ...ClientOption) (*GetSubjectVersionsVersionSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubjectVersionsVersionSchemaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_subject_versions_version_schema",
		Method:             "GET",
		PathPattern:        "/subjects/{subject}/versions/{version}/schema",
		ProducesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubjectVersionsVersionSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubjectVersionsVersionSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_subject_versions_version_schema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubjects retrieves a list of subjects
*/
func (a *Client) GetSubjects(params *GetSubjectsParams, opts ...ClientOption) (*GetSubjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_subjects",
		Method:             "GET",
		PathPattern:        "/subjects",
		ProducesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_subjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSubject checks if a schema is already registered for the subject
*/
func (a *Client) PostSubject(params *PostSubjectParams, opts ...ClientOption) (*PostSubjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSubjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_subject",
		Method:             "POST",
		PathPattern:        "/subjects/{subject}",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSubjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSubjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_subject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSubjectVersions creates a new schema for the subject
*/
func (a *Client) PostSubjectVersions(params *PostSubjectVersionsParams, opts ...ClientOption) (*PostSubjectVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSubjectVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_subject_versions",
		Method:             "POST",
		PathPattern:        "/subjects/{subject}/versions",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSubjectVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSubjectVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_subject_versions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutConfig sets the global compatibility level
*/
func (a *Client) PutConfig(params *PutConfigParams, opts ...ClientOption) (*PutConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put_config",
		Method:             "PUT",
		PathPattern:        "/config",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put_config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutConfigSubject sets the compatibility level for a subject
*/
func (a *Client) PutConfigSubject(params *PutConfigSubjectParams, opts ...ClientOption) (*PutConfigSubjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutConfigSubjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put_config_subject",
		Method:             "PUT",
		PathPattern:        "/config/{subject}",
		ProducesMediaTypes: []string{"application/vnd.schemaregistry.v1+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.schemaregistry+json", "application/vnd.schemaregistry.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutConfigSubjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutConfigSubjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put_config_subject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
