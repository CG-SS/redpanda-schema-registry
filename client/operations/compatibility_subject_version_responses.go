// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/CG-SS/redpanda-schema-registry/models"
)

// CompatibilitySubjectVersionReader is a Reader for the CompatibilitySubjectVersion structure.
type CompatibilitySubjectVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CompatibilitySubjectVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCompatibilitySubjectVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewCompatibilitySubjectVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCompatibilitySubjectVersionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCompatibilitySubjectVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /compatibility/subjects/{subject}/versions/{version}] compatibility_subject_version", response, response.Code())
	}
}

// NewCompatibilitySubjectVersionOK creates a CompatibilitySubjectVersionOK with default headers values
func NewCompatibilitySubjectVersionOK() *CompatibilitySubjectVersionOK {
	return &CompatibilitySubjectVersionOK{}
}

/*
CompatibilitySubjectVersionOK describes a response with status code 200, with default header values.

OK
*/
type CompatibilitySubjectVersionOK struct {
	Payload *CompatibilitySubjectVersionOKBody
}

// IsSuccess returns true when this compatibility subject version o k response has a 2xx status code
func (o *CompatibilitySubjectVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this compatibility subject version o k response has a 3xx status code
func (o *CompatibilitySubjectVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this compatibility subject version o k response has a 4xx status code
func (o *CompatibilitySubjectVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this compatibility subject version o k response has a 5xx status code
func (o *CompatibilitySubjectVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this compatibility subject version o k response a status code equal to that given
func (o *CompatibilitySubjectVersionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the compatibility subject version o k response
func (o *CompatibilitySubjectVersionOK) Code() int {
	return 200
}

func (o *CompatibilitySubjectVersionOK) Error() string {
	return fmt.Sprintf("[POST /compatibility/subjects/{subject}/versions/{version}][%d] compatibilitySubjectVersionOK  %+v", 200, o.Payload)
}

func (o *CompatibilitySubjectVersionOK) String() string {
	return fmt.Sprintf("[POST /compatibility/subjects/{subject}/versions/{version}][%d] compatibilitySubjectVersionOK  %+v", 200, o.Payload)
}

func (o *CompatibilitySubjectVersionOK) GetPayload() *CompatibilitySubjectVersionOKBody {
	return o.Payload
}

func (o *CompatibilitySubjectVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CompatibilitySubjectVersionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompatibilitySubjectVersionConflict creates a CompatibilitySubjectVersionConflict with default headers values
func NewCompatibilitySubjectVersionConflict() *CompatibilitySubjectVersionConflict {
	return &CompatibilitySubjectVersionConflict{}
}

/*
CompatibilitySubjectVersionConflict describes a response with status code 409, with default header values.

Incompatible schema
*/
type CompatibilitySubjectVersionConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this compatibility subject version conflict response has a 2xx status code
func (o *CompatibilitySubjectVersionConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this compatibility subject version conflict response has a 3xx status code
func (o *CompatibilitySubjectVersionConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this compatibility subject version conflict response has a 4xx status code
func (o *CompatibilitySubjectVersionConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this compatibility subject version conflict response has a 5xx status code
func (o *CompatibilitySubjectVersionConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this compatibility subject version conflict response a status code equal to that given
func (o *CompatibilitySubjectVersionConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the compatibility subject version conflict response
func (o *CompatibilitySubjectVersionConflict) Code() int {
	return 409
}

func (o *CompatibilitySubjectVersionConflict) Error() string {
	return fmt.Sprintf("[POST /compatibility/subjects/{subject}/versions/{version}][%d] compatibilitySubjectVersionConflict  %+v", 409, o.Payload)
}

func (o *CompatibilitySubjectVersionConflict) String() string {
	return fmt.Sprintf("[POST /compatibility/subjects/{subject}/versions/{version}][%d] compatibilitySubjectVersionConflict  %+v", 409, o.Payload)
}

func (o *CompatibilitySubjectVersionConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CompatibilitySubjectVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompatibilitySubjectVersionUnprocessableEntity creates a CompatibilitySubjectVersionUnprocessableEntity with default headers values
func NewCompatibilitySubjectVersionUnprocessableEntity() *CompatibilitySubjectVersionUnprocessableEntity {
	return &CompatibilitySubjectVersionUnprocessableEntity{}
}

/*
CompatibilitySubjectVersionUnprocessableEntity describes a response with status code 422, with default header values.

Invalid schema
*/
type CompatibilitySubjectVersionUnprocessableEntity struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this compatibility subject version unprocessable entity response has a 2xx status code
func (o *CompatibilitySubjectVersionUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this compatibility subject version unprocessable entity response has a 3xx status code
func (o *CompatibilitySubjectVersionUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this compatibility subject version unprocessable entity response has a 4xx status code
func (o *CompatibilitySubjectVersionUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this compatibility subject version unprocessable entity response has a 5xx status code
func (o *CompatibilitySubjectVersionUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this compatibility subject version unprocessable entity response a status code equal to that given
func (o *CompatibilitySubjectVersionUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the compatibility subject version unprocessable entity response
func (o *CompatibilitySubjectVersionUnprocessableEntity) Code() int {
	return 422
}

func (o *CompatibilitySubjectVersionUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /compatibility/subjects/{subject}/versions/{version}][%d] compatibilitySubjectVersionUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CompatibilitySubjectVersionUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /compatibility/subjects/{subject}/versions/{version}][%d] compatibilitySubjectVersionUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CompatibilitySubjectVersionUnprocessableEntity) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CompatibilitySubjectVersionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompatibilitySubjectVersionInternalServerError creates a CompatibilitySubjectVersionInternalServerError with default headers values
func NewCompatibilitySubjectVersionInternalServerError() *CompatibilitySubjectVersionInternalServerError {
	return &CompatibilitySubjectVersionInternalServerError{}
}

/*
CompatibilitySubjectVersionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CompatibilitySubjectVersionInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this compatibility subject version internal server error response has a 2xx status code
func (o *CompatibilitySubjectVersionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this compatibility subject version internal server error response has a 3xx status code
func (o *CompatibilitySubjectVersionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this compatibility subject version internal server error response has a 4xx status code
func (o *CompatibilitySubjectVersionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this compatibility subject version internal server error response has a 5xx status code
func (o *CompatibilitySubjectVersionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this compatibility subject version internal server error response a status code equal to that given
func (o *CompatibilitySubjectVersionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the compatibility subject version internal server error response
func (o *CompatibilitySubjectVersionInternalServerError) Code() int {
	return 500
}

func (o *CompatibilitySubjectVersionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /compatibility/subjects/{subject}/versions/{version}][%d] compatibilitySubjectVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *CompatibilitySubjectVersionInternalServerError) String() string {
	return fmt.Sprintf("[POST /compatibility/subjects/{subject}/versions/{version}][%d] compatibilitySubjectVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *CompatibilitySubjectVersionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CompatibilitySubjectVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CompatibilitySubjectVersionOKBody compatibility subject version o k body
swagger:model CompatibilitySubjectVersionOKBody
*/
type CompatibilitySubjectVersionOKBody struct {

	// id
	ID int64 `json:"id,omitempty"`
}

// Validate validates this compatibility subject version o k body
func (o *CompatibilitySubjectVersionOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this compatibility subject version o k body based on context it is used
func (o *CompatibilitySubjectVersionOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CompatibilitySubjectVersionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CompatibilitySubjectVersionOKBody) UnmarshalBinary(b []byte) error {
	var res CompatibilitySubjectVersionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
