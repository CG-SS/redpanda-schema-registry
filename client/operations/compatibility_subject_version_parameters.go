// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/CG-SS/redpanda-schema-registry/models"
)

// NewCompatibilitySubjectVersionParams creates a new CompatibilitySubjectVersionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCompatibilitySubjectVersionParams() *CompatibilitySubjectVersionParams {
	return &CompatibilitySubjectVersionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCompatibilitySubjectVersionParamsWithTimeout creates a new CompatibilitySubjectVersionParams object
// with the ability to set a timeout on a request.
func NewCompatibilitySubjectVersionParamsWithTimeout(timeout time.Duration) *CompatibilitySubjectVersionParams {
	return &CompatibilitySubjectVersionParams{
		timeout: timeout,
	}
}

// NewCompatibilitySubjectVersionParamsWithContext creates a new CompatibilitySubjectVersionParams object
// with the ability to set a context for a request.
func NewCompatibilitySubjectVersionParamsWithContext(ctx context.Context) *CompatibilitySubjectVersionParams {
	return &CompatibilitySubjectVersionParams{
		Context: ctx,
	}
}

// NewCompatibilitySubjectVersionParamsWithHTTPClient creates a new CompatibilitySubjectVersionParams object
// with the ability to set a custom HTTPClient for a request.
func NewCompatibilitySubjectVersionParamsWithHTTPClient(client *http.Client) *CompatibilitySubjectVersionParams {
	return &CompatibilitySubjectVersionParams{
		HTTPClient: client,
	}
}

/*
CompatibilitySubjectVersionParams contains all the parameters to send to the API endpoint

	for the compatibility subject version operation.

	Typically these are written to a http.Request.
*/
type CompatibilitySubjectVersionParams struct {

	// SchemaDef.
	SchemaDef *models.SchemaDef

	// Subject.
	Subject string

	// Version.
	Version int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the compatibility subject version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CompatibilitySubjectVersionParams) WithDefaults() *CompatibilitySubjectVersionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the compatibility subject version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CompatibilitySubjectVersionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) WithTimeout(timeout time.Duration) *CompatibilitySubjectVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) WithContext(ctx context.Context) *CompatibilitySubjectVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) WithHTTPClient(client *http.Client) *CompatibilitySubjectVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSchemaDef adds the schemaDef to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) WithSchemaDef(schemaDef *models.SchemaDef) *CompatibilitySubjectVersionParams {
	o.SetSchemaDef(schemaDef)
	return o
}

// SetSchemaDef adds the schemaDef to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) SetSchemaDef(schemaDef *models.SchemaDef) {
	o.SchemaDef = schemaDef
}

// WithSubject adds the subject to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) WithSubject(subject string) *CompatibilitySubjectVersionParams {
	o.SetSubject(subject)
	return o
}

// SetSubject adds the subject to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) SetSubject(subject string) {
	o.Subject = subject
}

// WithVersion adds the version to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) WithVersion(version int64) *CompatibilitySubjectVersionParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the compatibility subject version params
func (o *CompatibilitySubjectVersionParams) SetVersion(version int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *CompatibilitySubjectVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.SchemaDef != nil {
		if err := r.SetBodyParam(o.SchemaDef); err != nil {
			return err
		}
	}

	// path param subject
	if err := r.SetPathParam("subject", o.Subject); err != nil {
		return err
	}

	// path param version
	if err := r.SetPathParam("version", swag.FormatInt64(o.Version)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
